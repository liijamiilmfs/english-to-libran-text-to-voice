# Cursor AI Rules for Librán Voice Forge Project

## MCP Ruleset - Mandatory Workflow

### 1) Run backend/shared tests
- Command: `npm run test:all`
- If any test fails: **STOP**. Show failing summary. Do **not** stage or commit.

### 2) Run frontend tests (Vitest) with coverage gate
- Preferred command: `npm run test:coverage` (Vitest with coverage)
- Enforce **≥ 80%** for lines, branches, functions, and statements.
- If tests or coverage fail: **STOP** and report. Do **not** stage or commit.

### 3) Run type checking
- Command: `npm run type-check`
- If TypeScript errors exist: **STOP** and fix before proceeding.
- Do **not** stage or commit with type errors.

### 4) Stage changes
- Command: `git add -A`
- Only if Steps 1–3 passed.

### 5) Commit (Conventional Commits + required scope)
- Prompt me for `type(scope): summary` (e.g., `fix(translator): correct dictionary lookup`).
- Include brief bullet body listing notable areas/files touched.
- Command: `git commit -m "<message>"`

### 6) Wait for approval before pushing
- Create/update a **draft PR** targeting the default branch.
- Post a short test summary (pass/fail + coverage).
- **Do not push/merge** until explicit approval is recorded.
- If approval exists: push the **branch** and mark PR **Ready for review**.
- **Never** push directly to `main` unless I say **"override gate."**

## Hard rules
- Do **not** bypass any step unless I explicitly say **"override gate."**
- If any prerequisite command is missing, ask me to confirm the exact script name and location rather than guessing.

## Project-Specific Context

### Available Scripts (from package.json)
- `npm run test:all` - Run all tests (Node.js + Python)
- `npm run test:coverage` - Run tests with coverage reporting
- `npm run test:vitest` - Run Vitest tests only
- `npm run type-check` - TypeScript type checking
- `npm run lint` - ESLint checking

### Key Project Areas
- `lib/translator/` - Core translation logic
- `app/api/` - Next.js API routes
- `app/components/` - React components
- `test/` - Test files (unit + integration)
- `scripts/` - Build and utility scripts

### Common Scopes
- `translator` - Translation system changes
- `api` - API route changes
- `ui` - Frontend component changes
- `test` - Test-related changes
- `build` - Build system changes
- `deps` - Dependency updates
- `docs` - Documentation changes

### Translation System Notes
- Focus on modern translation first, ancient later
- Dictionary files: `lib/translator/dictionaries/`
- Key normalization is implemented
- Admin reload endpoint: `/api/admin/reload`
- Debug logging is enabled for troubleshooting

### Git Workflow
- Primary branch: `dev`
- Main branch: `main` (production)
- Feature branches: `feature/*`
- Bugfix branches: `bugfix/*`
- Codex branches: `codex/*`

## Quality Gates
- All tests must pass before commit
- TypeScript compilation must succeed
- Coverage threshold: 80% minimum
- No direct pushes to main without approval
- Draft PRs for all changes
